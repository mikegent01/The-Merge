
    # ==============================================================================
    # 14. INTERNAL WEB SERVER (for HTML pages)
    # ==============================================================================
    WEBSERVER_PORT = 3000
    HTML_SERVE_DIR = os.path.abspath(os.path.join(renpy.config.gamedir, "htmls"))

    class RenpyHTTPRequestHandler(SimpleHTTPRequestHandler):
        def __init__(self, *args, **kwargs):
            kwargs['directory'] = HTML_SERVE_DIR
            super().__init__(*args, **kwargs)

        def translate_path(self, path):
            path = path.split('?', 1)[0].split('#', 1)[0]
            decoded_path = urllib.parse.unquote(path).lstrip('/')
            safe_relative_path = os.path.normpath(decoded_path)
            if safe_relative_path.startswith('..') or os.path.isabs(safe_relative_path):
                return "ACCESS_DENIED_INVALID_PATH"
            return os.path.join(HTML_SERVE_DIR, safe_relative_path)

        def log_message(self, format, *args):
            pass # Suppress console logs

    class WebServerThread(threading.Thread):
        def __init__(self, port):
            super().__init__(daemon=True)
            self.port = port
            self.server = None

        def run(self):
            if not os.path.isdir(HTML_SERVE_DIR):
                print(f"[Web Server Error] HTML directory not found: {HTML_SERVE_DIR}")
                return
            try:
                self.server = TCPServer(("localhost", self.port), RenpyHTTPRequestHandler)
                print(f"[Web Server] Starting on http://localhost:{self.port}")
                self.server.serve_forever()
            except OSError as e:
                print(f"[Web Server Error] Failed to start server on port {self.port}: {e}")
                renpy.notify(f"Error: Could not start web server on port {self.port}.")
            except Exception as e:
                print(f"[Web Server Error] An unexpected error occurred: {e}")

        def stop(self):
            if self.server:
                self.server.shutdown()
                self.server.server_close()
                self.server = None
                print("[Web Server] Shutdown complete.")

    _web_server_instance = None
    def start_web_server():
        global _web_server_instance
        if _web_server_instance is None or not _web_server_instance.is_alive():
            if os.path.isdir(HTML_SERVE_DIR):
                _web_server_instance = WebServerThread(WEBSERVER_PORT)
                _web_server_instance.start()
            else:
                renpy.notify("Error: Cannot start web server, HTML folder missing.")

    def stop_web_server():
        global _web_server_instance
        if _web_server_instance and _web_server_instance.is_alive():
            _web_server_instance.stop()
            _web_server_instance.join(timeout=2.0)
            _web_server_instance = None

    def open_html(filename_no_ext, last_label=None):
        if _web_server_instance is None or not _web_server_instance.is_alive():
             renpy.notify("Internal web server is not running.")
             return

        base_url = f"http://localhost:{WEBSERVER_PORT}/{filename_no_ext}.html"
        query_params = {'lastLabel': last_label} if last_label else {}
        full_url = f"{base_url}?{urllib.parse.urlencode(query_params)}" if query_params else base_url

        try:
            if not webbrowser.open(full_url):
                renpy.notify("Could not open web browser.")
        except Exception as e:
            renpy.notify(f"Error opening browser: {e}")
            #
                # --- Server Lifecycle Management ---
    start_web_server()
    config.quit_action = stop_web_server  